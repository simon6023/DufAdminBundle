<?php

namespace Duf\Bundle\AdminBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;

use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;

use Duf\AdminBundle\Entity\DufAdminEntity;
use Duf\AdminBundle\Form\DufAdminGenericType;

class FormController extends Controller
{
    public function formRequestAction($path, Request $request)
    {
        // instantiate services
        $routing_service            = $this->get('duf_admin.dufadminrouting');
        $form_service               = $this->get('duf_admin.dufadminform');

        // get entity name
        if (null !== $request->get('form_entity_name')) {
            $entity_name            = $request->get('form_entity_name');
        }
        else {
            $entity_name            = $routing_service->getEntityName($path);
        }

        // get entity class
        $entity_class               = $routing_service->getEntityClass($entity_name);

        // get page title
        $page_title                 = $routing_service->getPageTitle($entity_name);

        if (strpos($path, '/update/')) {
            $entity_id      = $routing_service->getEntityId($path);
            $entity         = $this->getDoctrine()->getRepository($entity_name)->findOneById($entity_id);
        }
        else {
            $entity                     = new $entity_class;
        }

        $form_options_properties    = $form_service->getFormOptions($entity_name, $entity_class);

        $form           = $this->createForm(DufAdminGenericType::class, $entity, array(
                                'action'        => '',
                                'method'        => 'POST',
                                'duf_options'   => $form_options_properties['form_options'],
                            )
                        );
        $form->handleRequest($request);

        if ($form->isValid()) {
            $em = $this->getDoctrine()->getManager();

            if ($request->isXmlHttpRequest()) {
                if (null !== $request->get('parent_entity_id') && null !== $request->get('parent_entity_class')) {
                    $parent_entity_name     = $routing_service->getEntityNameFromBundle($request->get('parent_entity_class'));
                    $parent_form_options    = $form_service->getFormOptions($entity_name, $request->get('parent_entity_class'));
                    unset($parent_form_options['create_form']);

                    if (isset($parent_form_options['form_embed'])) {
                        foreach ($parent_form_options['form_embed'] as $form_embed_value) {
                            if ($form_embed_value['target_entity'] == $entity_class || $form_embed_value['target_entity'] == substr($entity_class, 1, strlen($entity_class) - 1)) {
                                $embed_setter           = $form_service->getChildEntitySetter($entity, $form_embed_value);
                                $parent_class           = $request->get('parent_entity_class');
                                $parent_entity          = $this->getDoctrine()->getRepository($parent_class)->findOneById($request->get('parent_entity_id'));

                                if (!empty($parent_entity)) {
                                    $entity->{$embed_setter}($parent_entity);
                                }
                            }
                        }
                    }
                }
                elseif (null !== $request->get('form_token')) {
                    $entity->setFormToken($request->get('form_token'));
                }
            }

            $em->persist($entity);
            $em->flush();

            if ($request->isXmlHttpRequest()) {
                $encoder        = new JsonEncoder();
                $normalizer     = new ObjectNormalizer();

                $normalizer->setIgnoredAttributes(array('user'));
                $normalizer->setCircularReferenceHandler(function ($object) {
                    return $object->getId();
                });

                $serializer     = new Serializer(array($normalizer), array($encoder));

                $json_entity    = $serializer->serialize($entity, 'json');

                return new Response($json_entity);
            }

            // persist embed forms
            $form_data = $request->get('duf_admin_generic');
            if (isset($form_data['duf_admin_form_token'])) {
                $form_token             = $form_data['duf_admin_form_token'];

                if (isset($form_options_properties['form_embed']) && !empty($form_options_properties['form_embed'])) {
                    foreach ($form_options_properties['form_embed'] as $form_embed) {
                        $orphan_entities    = $this->getDoctrine()->getRepository($form_embed['target_entity'])->findByFormToken($form_embed['target_entity'], $form_token);

                        if (!empty($orphan_entities)) {
                            $setter         = $form_service->getParentEntitySetter($entity, $form_embed);

                            if (null !== $setter) {
                                foreach ($orphan_entities as $orphan_entity) {
                                    $child_setter   = $form_service->getChildEntitySetter($orphan_entity, $form_embed);
                                    if (null !== $child_setter) {
                                        $entity->{$setter}($orphan_entity);

                                        $orphan_entity->{$child_setter}($entity);
                                        $orphan_entity->setFormToken(null);
                                        $em->persist($orphan_entity);
                                    }
                                }
                            }

                            $em->persist($entity);
                            $em->flush();
                        }
                    }
                }
            }

            // get redirect route
            $redirect_url = $routing_service->getEntityRoute($entity_name, 'index');

            return $this->redirect($redirect_url);
        }
        else {
            echo '<pre>'; print_r($request->get('duf_admin_generic')); echo '</pre>';

            foreach ($form->getErrors(true) as $form_error) {
                var_dump($form_error->getMessage());

                echo '<pre>'; print_r($form_error->getMessageParameters()); echo '</pre>';
            }

            exit('form contains errors');
        }

        if ($request->isXmlHttpRequest()) {
            $error_response = array(
                    'message'       => 'error',
                );
            return new JsonResponse($error_response);
        }

        // render form with errors
        return $this->render('DufAdminBundle:Crud:entities_new.html.twig', array(
                'content_type'          => $routing_service->getContentType($entity_name),
                'create_form'           => $form->createView(),
                'entity_name'           => $entity_name,
                'page_title'            => $page_title,
                'form_properties'       => $form_options_properties['form_properties'],
            )
        );
    }

    public function deleteRequestAction($id, $entity_name)
    {       
        $routing_service    = $this->get('duf_admin.dufadminrouting');
        $entity             = $this->getDoctrine()->getRepository($entity_name)->findOneById($id);

        if (!empty($entity)) {
            $em         = $this->getDoctrine()->getManager();
            $em->remove($entity);
            $em->flush();

            // get redirect route
            $redirect_url = $routing_service->getEntityRoute($entity_name, 'index');

            return $this->redirect($redirect_url);
        }

        return new Response('entity not found', 404);
    }

    public function deleteEmbedEntityAction($embed_entity_class, $embed_entity_id)
    {
        $embed_entity = $this->getDoctrine()->getRepository($embed_entity_class)->findOneById($embed_entity_id);
        if (!empty($embed_entity)) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($embed_entity);
            $em->flush();

            return new Response('ok', 200);
        }

        return new Response('error', 500);
    }
}

